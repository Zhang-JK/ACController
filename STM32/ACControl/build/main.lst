ARM GAS  /tmp/cctPkvIt.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemClock_Config,"ax",%progbits
  16              		.align	1
  17              		.global	SystemClock_Config
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	SystemClock_Config:
  25              	.LFB66:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.</center></h2>
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****  * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****  * License. You may obtain a copy of the License at:
  15:Src/main.c    ****  *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****  *
  17:Src/main.c    ****  ******************************************************************************
  18:Src/main.c    ****  */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "tim.h"
  23:Src/main.c    **** #include "usart.h"
  24:Src/main.c    **** #include "gpio.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/cctPkvIt.s 			page 2


  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN PV */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PV */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  52:Src/main.c    **** void SystemClock_Config(void);
  53:Src/main.c    **** /* USER CODE BEGIN PFP */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END PFP */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  58:Src/main.c    **** /* USER CODE BEGIN 0 */
  59:Src/main.c    **** char RxBuffer[RXBUFFERSIZE]; //接收数据
  60:Src/main.c    **** uint8_t aRxBuffer;           //接收中断缓冲
  61:Src/main.c    **** uint8_t Uart1_Rx_Cnt = 0;    //接收缓冲计数
  62:Src/main.c    **** /* USER CODE END 0 */
  63:Src/main.c    **** 
  64:Src/main.c    **** /**
  65:Src/main.c    ****   * @brief  The application entry point.
  66:Src/main.c    ****   * @retval int
  67:Src/main.c    ****   */
  68:Src/main.c    **** int main(void)
  69:Src/main.c    **** {
  70:Src/main.c    ****   /* USER CODE BEGIN 1 */
  71:Src/main.c    **** 
  72:Src/main.c    ****   /* USER CODE END 1 */
  73:Src/main.c    **** 
  74:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  75:Src/main.c    **** 
  76:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  77:Src/main.c    ****   HAL_Init();
  78:Src/main.c    **** 
  79:Src/main.c    ****   /* USER CODE BEGIN Init */
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* USER CODE END Init */
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* Configure the system clock */
  84:Src/main.c    ****   SystemClock_Config();
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END SysInit */
  89:Src/main.c    **** 
ARM GAS  /tmp/cctPkvIt.s 			page 3


  90:Src/main.c    ****   /* Initialize all configured peripherals */
  91:Src/main.c    ****   MX_GPIO_Init();
  92:Src/main.c    ****   MX_USART1_UART_Init();
  93:Src/main.c    ****   MX_TIM1_Init();
  94:Src/main.c    ****   MX_TIM2_Init();
  95:Src/main.c    ****   /* USER CODE BEGIN 2 */
  96:Src/main.c    ****   HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin, GPIO_PIN_RESET);
  97:Src/main.c    ****   HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);
  98:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  99:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 100:Src/main.c    **** 
 101:Src/main.c    ****   int pwm_val = 200;
 102:Src/main.c    ****   /* USER CODE END 2 */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* Infinite loop */
 105:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 106:Src/main.c    ****   while (1) {
 107:Src/main.c    ****     /* USER CODE END WHILE */
 108:Src/main.c    **** 
 109:Src/main.c    ****     /* USER CODE BEGIN 3 */
 110:Src/main.c    ****     if (HAL_GPIO_ReadPin(MAIN_SWITCH_GPIO_Port, MAIN_SWITCH_Pin) ==
 111:Src/main.c    ****         GPIO_PIN_SET)
 112:Src/main.c    ****       HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin, GPIO_PIN_SET);
 113:Src/main.c    ****     else
 114:Src/main.c    ****       HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin,
 115:Src/main.c    ****                         GPIO_PIN_RESET);
 116:Src/main.c    **** 
 117:Src/main.c    ****     if(pwm_val <= 2000) {
 118:Src/main.c    ****       pwm_val += 200;
 119:Src/main.c    ****       __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwm_val);
 120:Src/main.c    ****       __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_val);
 121:Src/main.c    ****     }
 122:Src/main.c    ****     else {
 123:Src/main.c    ****       pwm_val -= 1800;
 124:Src/main.c    ****       __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwm_val);
 125:Src/main.c    ****       __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_val);
 126:Src/main.c    ****     }
 127:Src/main.c    **** 
 128:Src/main.c    ****     HAL_Delay(1000);
 129:Src/main.c    ****     // HAL_UART_Transmit(&huart1, (uint8_t *)"TEST", 4, 0xFFFF);
 130:Src/main.c    **** 
 131:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t *)&RxBuffer, Uart1_Rx_Cnt,
 132:Src/main.c    ****                       0xFFFF); //将收到的信息发送出去
 133:Src/main.c    ****     while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX)
 134:Src/main.c    ****       ; //检测UART发送结束
 135:Src/main.c    ****     Uart1_Rx_Cnt = 0;
 136:Src/main.c    ****     memset(RxBuffer, 0x00, sizeof(RxBuffer)); //清空数组
 137:Src/main.c    ****   }
 138:Src/main.c    ****   /* USER CODE END 3 */
 139:Src/main.c    **** }
 140:Src/main.c    **** 
 141:Src/main.c    **** /**
 142:Src/main.c    ****   * @brief System Clock Configuration
 143:Src/main.c    ****   * @retval None
 144:Src/main.c    ****   */
 145:Src/main.c    **** void SystemClock_Config(void)
 146:Src/main.c    **** {
ARM GAS  /tmp/cctPkvIt.s 			page 4


  27              		.loc 1 146 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 64
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 91B0     		sub	sp, sp, #68
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 80
 147:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  40              		.loc 1 147 3 view .LVU1
  41              		.loc 1 147 22 is_stmt 0 view .LVU2
  42 0004 2022     		movs	r2, #32
  43 0006 0021     		movs	r1, #0
  44 0008 0DEB0200 		add	r0, sp, r2
  45 000c FFF7FEFF 		bl	memset
  46              	.LVL0:
 148:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  47              		.loc 1 148 3 is_stmt 1 view .LVU3
  48              		.loc 1 148 22 is_stmt 0 view .LVU4
  49 0010 0024     		movs	r4, #0
  50 0012 0194     		str	r4, [sp, #4]
  51 0014 0294     		str	r4, [sp, #8]
  52 0016 0394     		str	r4, [sp, #12]
  53 0018 0494     		str	r4, [sp, #16]
  54 001a 0594     		str	r4, [sp, #20]
 149:Src/main.c    **** 
 150:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 151:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 152:Src/main.c    ****   */
 153:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  55              		.loc 1 153 3 is_stmt 1 view .LVU5
  56              		.loc 1 153 36 is_stmt 0 view .LVU6
  57 001c 0122     		movs	r2, #1
  58 001e 0692     		str	r2, [sp, #24]
 154:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  59              		.loc 1 154 3 is_stmt 1 view .LVU7
  60              		.loc 1 154 30 is_stmt 0 view .LVU8
  61 0020 4FF48033 		mov	r3, #65536
  62 0024 0793     		str	r3, [sp, #28]
 155:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  63              		.loc 1 155 3 is_stmt 1 view .LVU9
 156:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  64              		.loc 1 156 3 view .LVU10
  65              		.loc 1 156 30 is_stmt 0 view .LVU11
  66 0026 0A92     		str	r2, [sp, #40]
 157:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  67              		.loc 1 157 3 is_stmt 1 view .LVU12
  68              		.loc 1 157 34 is_stmt 0 view .LVU13
  69 0028 0225     		movs	r5, #2
  70 002a 0D95     		str	r5, [sp, #52]
 158:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  71              		.loc 1 158 3 is_stmt 1 view .LVU14
ARM GAS  /tmp/cctPkvIt.s 			page 5


  72              		.loc 1 158 35 is_stmt 0 view .LVU15
  73 002c 0E93     		str	r3, [sp, #56]
 159:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  74              		.loc 1 159 3 is_stmt 1 view .LVU16
 160:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  75              		.loc 1 160 3 view .LVU17
  76              		.loc 1 160 7 is_stmt 0 view .LVU18
  77 002e 06A8     		add	r0, sp, #24
  78 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
  79              	.LVL1:
 161:Src/main.c    ****   {
 162:Src/main.c    ****     Error_Handler();
 163:Src/main.c    ****   }
 164:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
 165:Src/main.c    ****   */
 166:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  80              		.loc 1 166 3 is_stmt 1 view .LVU19
  81              		.loc 1 166 31 is_stmt 0 view .LVU20
  82 0034 0F23     		movs	r3, #15
  83 0036 0193     		str	r3, [sp, #4]
 167:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 168:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  84              		.loc 1 168 3 is_stmt 1 view .LVU21
  85              		.loc 1 168 34 is_stmt 0 view .LVU22
  86 0038 0295     		str	r5, [sp, #8]
 169:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  87              		.loc 1 169 3 is_stmt 1 view .LVU23
  88              		.loc 1 169 35 is_stmt 0 view .LVU24
  89 003a 0394     		str	r4, [sp, #12]
 170:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  90              		.loc 1 170 3 is_stmt 1 view .LVU25
  91              		.loc 1 170 36 is_stmt 0 view .LVU26
  92 003c 0494     		str	r4, [sp, #16]
 171:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  93              		.loc 1 171 3 is_stmt 1 view .LVU27
  94              		.loc 1 171 36 is_stmt 0 view .LVU28
  95 003e 0594     		str	r4, [sp, #20]
 172:Src/main.c    **** 
 173:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  96              		.loc 1 173 3 is_stmt 1 view .LVU29
  97              		.loc 1 173 7 is_stmt 0 view .LVU30
  98 0040 2146     		mov	r1, r4
  99 0042 01A8     		add	r0, sp, #4
 100 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 101              	.LVL2:
 174:Src/main.c    ****   {
 175:Src/main.c    ****     Error_Handler();
 176:Src/main.c    ****   }
 177:Src/main.c    **** }
 102              		.loc 1 177 1 view .LVU31
 103 0048 11B0     		add	sp, sp, #68
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 12
 106              		@ sp needed
 107 004a 30BD     		pop	{r4, r5, pc}
 108              		.cfi_endproc
 109              	.LFE66:
ARM GAS  /tmp/cctPkvIt.s 			page 6


 111              		.section	.text.main,"ax",%progbits
 112              		.align	1
 113              		.global	main
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu softvfp
 119              	main:
 120              	.LFB65:
  69:Src/main.c    ****   /* USER CODE BEGIN 1 */
 121              		.loc 1 69 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125 0000 10B5     		push	{r4, lr}
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 4, -8
 129              		.cfi_offset 14, -4
  77:Src/main.c    **** 
 130              		.loc 1 77 3 view .LVU33
 131 0002 FFF7FEFF 		bl	HAL_Init
 132              	.LVL3:
  84:Src/main.c    **** 
 133              		.loc 1 84 3 view .LVU34
 134 0006 FFF7FEFF 		bl	SystemClock_Config
 135              	.LVL4:
  91:Src/main.c    ****   MX_USART1_UART_Init();
 136              		.loc 1 91 3 view .LVU35
 137 000a FFF7FEFF 		bl	MX_GPIO_Init
 138              	.LVL5:
  92:Src/main.c    ****   MX_TIM1_Init();
 139              		.loc 1 92 3 view .LVU36
 140 000e FFF7FEFF 		bl	MX_USART1_UART_Init
 141              	.LVL6:
  93:Src/main.c    ****   MX_TIM2_Init();
 142              		.loc 1 93 3 view .LVU37
 143 0012 FFF7FEFF 		bl	MX_TIM1_Init
 144              	.LVL7:
  94:Src/main.c    ****   /* USER CODE BEGIN 2 */
 145              		.loc 1 94 3 view .LVU38
 146 0016 FFF7FEFF 		bl	MX_TIM2_Init
 147              	.LVL8:
  96:Src/main.c    ****   HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);
 148              		.loc 1 96 3 view .LVU39
 149 001a 0022     		movs	r2, #0
 150 001c 4FF40051 		mov	r1, #8192
 151 0020 2848     		ldr	r0, .L12
 152 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 153              	.LVL9:
  97:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 154              		.loc 1 97 3 view .LVU40
 155 0026 0122     		movs	r2, #1
 156 0028 2749     		ldr	r1, .L12+4
 157 002a 2848     		ldr	r0, .L12+8
 158 002c FFF7FEFF 		bl	HAL_UART_Receive_IT
 159              	.LVL10:
ARM GAS  /tmp/cctPkvIt.s 			page 7


  98:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 160              		.loc 1 98 3 view .LVU41
 161 0030 0021     		movs	r1, #0
 162 0032 2748     		ldr	r0, .L12+12
 163 0034 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 164              	.LVL11:
  99:Src/main.c    **** 
 165              		.loc 1 99 3 view .LVU42
 166 0038 0021     		movs	r1, #0
 167 003a 2648     		ldr	r0, .L12+16
 168 003c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 169              	.LVL12:
 101:Src/main.c    ****   /* USER CODE END 2 */
 170              		.loc 1 101 3 view .LVU43
 101:Src/main.c    ****   /* USER CODE END 2 */
 171              		.loc 1 101 7 is_stmt 0 view .LVU44
 172 0040 C824     		movs	r4, #200
 173 0042 27E0     		b	.L9
 174              	.LVL13:
 175              	.L11:
 176              	.LBB2:
 112:Src/main.c    ****     else
 177              		.loc 1 112 7 is_stmt 1 view .LVU45
 178 0044 0122     		movs	r2, #1
 179 0046 4FF40051 		mov	r1, #8192
 180 004a 1E48     		ldr	r0, .L12
 181 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 182              	.LVL14:
 183 0050 2CE0     		b	.L5
 184              	.L6:
 123:Src/main.c    ****       __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwm_val);
 185              		.loc 1 123 7 view .LVU46
 123:Src/main.c    ****       __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwm_val);
 186              		.loc 1 123 15 is_stmt 0 view .LVU47
 187 0052 A4F5E164 		sub	r4, r4, #1800
 188              	.LVL15:
 124:Src/main.c    ****       __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_val);
 189              		.loc 1 124 7 is_stmt 1 view .LVU48
 190 0056 1E4B     		ldr	r3, .L12+12
 191 0058 1B68     		ldr	r3, [r3]
 192 005a 5C63     		str	r4, [r3, #52]
 125:Src/main.c    ****     }
 193              		.loc 1 125 7 view .LVU49
 194 005c 1D4B     		ldr	r3, .L12+16
 195 005e 1B68     		ldr	r3, [r3]
 196 0060 5C63     		str	r4, [r3, #52]
 197              	.L7:
 128:Src/main.c    ****     // HAL_UART_Transmit(&huart1, (uint8_t *)"TEST", 4, 0xFFFF);
 198              		.loc 1 128 5 view .LVU50
 199 0062 4FF47A70 		mov	r0, #1000
 200 0066 FFF7FEFF 		bl	HAL_Delay
 201              	.LVL16:
 131:Src/main.c    ****                       0xFFFF); //将收到的信息发送出去
 202              		.loc 1 131 5 view .LVU51
 203 006a 4FF6FF73 		movw	r3, #65535
 204 006e 1A4A     		ldr	r2, .L12+20
 205 0070 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
ARM GAS  /tmp/cctPkvIt.s 			page 8


 206 0072 1A49     		ldr	r1, .L12+24
 207 0074 1548     		ldr	r0, .L12+8
 208 0076 FFF7FEFF 		bl	HAL_UART_Transmit
 209              	.LVL17:
 133:Src/main.c    ****       ; //检测UART发送结束
 210              		.loc 1 133 5 view .LVU52
 211              	.L8:
 134:Src/main.c    ****     Uart1_Rx_Cnt = 0;
 212              		.loc 1 134 7 discriminator 1 view .LVU53
 133:Src/main.c    ****       ; //检测UART发送结束
 213              		.loc 1 133 12 is_stmt 0 discriminator 1 view .LVU54
 214 007a 1448     		ldr	r0, .L12+8
 215 007c FFF7FEFF 		bl	HAL_UART_GetState
 216              	.LVL18:
 133:Src/main.c    ****       ; //检测UART发送结束
 217              		.loc 1 133 11 discriminator 1 view .LVU55
 218 0080 2128     		cmp	r0, #33
 219 0082 FAD0     		beq	.L8
 135:Src/main.c    ****     memset(RxBuffer, 0x00, sizeof(RxBuffer)); //清空数组
 220              		.loc 1 135 5 is_stmt 1 view .LVU56
 135:Src/main.c    ****     memset(RxBuffer, 0x00, sizeof(RxBuffer)); //清空数组
 221              		.loc 1 135 18 is_stmt 0 view .LVU57
 222 0084 0021     		movs	r1, #0
 223 0086 144B     		ldr	r3, .L12+20
 224 0088 1970     		strb	r1, [r3]
 136:Src/main.c    ****   }
 225              		.loc 1 136 5 is_stmt 1 view .LVU58
 226 008a 4FF48072 		mov	r2, #256
 227 008e 1348     		ldr	r0, .L12+24
 228 0090 FFF7FEFF 		bl	memset
 229              	.LVL19:
 230              	.L9:
 136:Src/main.c    ****   }
 231              		.loc 1 136 5 is_stmt 0 view .LVU59
 232              	.LBE2:
 106:Src/main.c    ****     /* USER CODE END WHILE */
 233              		.loc 1 106 3 is_stmt 1 view .LVU60
 234              	.LBB3:
 110:Src/main.c    ****         GPIO_PIN_SET)
 235              		.loc 1 110 5 view .LVU61
 110:Src/main.c    ****         GPIO_PIN_SET)
 236              		.loc 1 110 9 is_stmt 0 view .LVU62
 237 0094 0121     		movs	r1, #1
 238 0096 1248     		ldr	r0, .L12+28
 239 0098 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 240              	.LVL20:
 110:Src/main.c    ****         GPIO_PIN_SET)
 241              		.loc 1 110 8 view .LVU63
 242 009c 0128     		cmp	r0, #1
 243 009e D1D0     		beq	.L11
 114:Src/main.c    ****                         GPIO_PIN_RESET);
 244              		.loc 1 114 7 is_stmt 1 view .LVU64
 245 00a0 0022     		movs	r2, #0
 246 00a2 4FF40051 		mov	r1, #8192
 247 00a6 0748     		ldr	r0, .L12
 248 00a8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 249              	.LVL21:
ARM GAS  /tmp/cctPkvIt.s 			page 9


 250              	.L5:
 117:Src/main.c    ****       pwm_val += 200;
 251              		.loc 1 117 5 view .LVU65
 117:Src/main.c    ****       pwm_val += 200;
 252              		.loc 1 117 7 is_stmt 0 view .LVU66
 253 00ac B4F5FA6F 		cmp	r4, #2000
 254 00b0 CFDC     		bgt	.L6
 118:Src/main.c    ****       __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwm_val);
 255              		.loc 1 118 7 is_stmt 1 view .LVU67
 118:Src/main.c    ****       __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwm_val);
 256              		.loc 1 118 15 is_stmt 0 view .LVU68
 257 00b2 C834     		adds	r4, r4, #200
 258              	.LVL22:
 119:Src/main.c    ****       __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_val);
 259              		.loc 1 119 7 is_stmt 1 view .LVU69
 260 00b4 064B     		ldr	r3, .L12+12
 261 00b6 1B68     		ldr	r3, [r3]
 262 00b8 5C63     		str	r4, [r3, #52]
 120:Src/main.c    ****     }
 263              		.loc 1 120 7 view .LVU70
 264 00ba 064B     		ldr	r3, .L12+16
 265 00bc 1B68     		ldr	r3, [r3]
 266 00be 5C63     		str	r4, [r3, #52]
 267 00c0 CFE7     		b	.L7
 268              	.L13:
 269 00c2 00BF     		.align	2
 270              	.L12:
 271 00c4 00100140 		.word	1073811456
 272 00c8 00000000 		.word	aRxBuffer
 273 00cc 00000000 		.word	huart1
 274 00d0 00000000 		.word	htim1
 275 00d4 00000000 		.word	htim2
 276 00d8 00000000 		.word	.LANCHOR0
 277 00dc 00000000 		.word	RxBuffer
 278 00e0 000C0140 		.word	1073810432
 279              	.LBE3:
 280              		.cfi_endproc
 281              	.LFE65:
 283              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 284              		.align	1
 285              		.global	HAL_UART_RxCpltCallback
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu softvfp
 291              	HAL_UART_RxCpltCallback:
 292              	.LVL23:
 293              	.LFB67:
 178:Src/main.c    **** 
 179:Src/main.c    **** /* USER CODE BEGIN 4 */
 180:Src/main.c    **** // void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 181:Src/main.c    **** // {
 182:Src/main.c    **** //   if(GPIO_Pin == MAIN_SWITCH_Pin)
 183:Src/main.c    **** //   {
 184:Src/main.c    **** //     HAL_Delay(20);
 185:Src/main.c    **** //     if(HAL_GPIO_ReadPin(MAIN_SWITCH_GPIO_Port, MAIN_SWITCH_Pin) ==
 186:Src/main.c    **** //     GPIO_PIN_SET)
ARM GAS  /tmp/cctPkvIt.s 			page 10


 187:Src/main.c    **** //     {
 188:Src/main.c    **** //       HAL_GPIO_TogglePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin);
 189:Src/main.c    **** //     }
 190:Src/main.c    **** 
 191:Src/main.c    **** //     if(HAL_GPIO_ReadPin(MAIN_SWITCH_GPIO_Port, MAIN_SWITCH_Pin) ==
 192:Src/main.c    **** //     GPIO_PIN_RESET)
 193:Src/main.c    **** //     {
 194:Src/main.c    **** //       HAL_GPIO_TogglePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin);
 195:Src/main.c    **** //     }
 196:Src/main.c    **** //   }
 197:Src/main.c    **** // }
 198:Src/main.c    **** 
 199:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 294              		.loc 1 199 57 view -0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		.loc 1 199 57 is_stmt 0 view .LVU72
 299 0000 08B5     		push	{r3, lr}
 300              	.LCFI4:
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 3, -8
 303              		.cfi_offset 14, -4
 200:Src/main.c    ****   /* Prevent unused argument(s) compilation warning */
 201:Src/main.c    ****   UNUSED(huart);
 304              		.loc 1 201 3 is_stmt 1 view .LVU73
 202:Src/main.c    ****   /* NOTE: This function Should not be modified, when the callback is needed,
 203:Src/main.c    ****            the HAL_UART_TxCpltCallback could be implemented in the user file
 204:Src/main.c    ****    */
 205:Src/main.c    **** 
 206:Src/main.c    ****   if (Uart1_Rx_Cnt >= 255) //溢出判断
 305              		.loc 1 206 3 view .LVU74
 306              		.loc 1 206 20 is_stmt 0 view .LVU75
 307 0002 104B     		ldr	r3, .L19
 308 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 309              		.loc 1 206 6 view .LVU76
 310 0006 FF2B     		cmp	r3, #255
 311 0008 0CD0     		beq	.L18
 207:Src/main.c    ****   {
 208:Src/main.c    ****     Uart1_Rx_Cnt = 0;
 209:Src/main.c    ****     memset(RxBuffer, 0x00, sizeof(RxBuffer));
 210:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t *)"OVERFLOW", 8, 0xFFFF);
 211:Src/main.c    **** 
 212:Src/main.c    ****   } else {
 213:Src/main.c    ****     RxBuffer[Uart1_Rx_Cnt++] = aRxBuffer; //接收数据转存
 312              		.loc 1 213 5 is_stmt 1 view .LVU77
 313              		.loc 1 213 26 is_stmt 0 view .LVU78
 314 000a 591C     		adds	r1, r3, #1
 315 000c 0D4A     		ldr	r2, .L19
 316 000e 1170     		strb	r1, [r2]
 317              		.loc 1 213 30 view .LVU79
 318 0010 0D4A     		ldr	r2, .L19+4
 319 0012 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 320 0014 0D4A     		ldr	r2, .L19+8
 321 0016 D154     		strb	r1, [r2, r3]
 322              	.LVL24:
 323              	.L16:
ARM GAS  /tmp/cctPkvIt.s 			page 11


 214:Src/main.c    **** 
 215:Src/main.c    ****     // HAL_UART_Transmit(&huart1, (uint8_t *)&RxBuffer, Uart1_Rx_Cnt,
 216:Src/main.c    ****     //                   0xFFFF); //将收到的信息发送出去
 217:Src/main.c    ****     // while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX)
 218:Src/main.c    ****     //   ; //检测UART发送结束
 219:Src/main.c    ****     // Uart1_Rx_Cnt = 0;
 220:Src/main.c    ****     // memset(RxBuffer, 0x00, sizeof(RxBuffer)); //清空数组
 221:Src/main.c    ****   }
 222:Src/main.c    **** 
 223:Src/main.c    ****   HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1); //再开启接收中断
 324              		.loc 1 223 3 is_stmt 1 view .LVU80
 325 0018 0122     		movs	r2, #1
 326 001a 0B49     		ldr	r1, .L19+4
 327 001c 0C48     		ldr	r0, .L19+12
 328 001e FFF7FEFF 		bl	HAL_UART_Receive_IT
 329              	.LVL25:
 224:Src/main.c    **** }
 330              		.loc 1 224 1 is_stmt 0 view .LVU81
 331 0022 08BD     		pop	{r3, pc}
 332              	.LVL26:
 333              	.L18:
 334              	.LBB4:
 208:Src/main.c    ****     memset(RxBuffer, 0x00, sizeof(RxBuffer));
 335              		.loc 1 208 5 is_stmt 1 view .LVU82
 208:Src/main.c    ****     memset(RxBuffer, 0x00, sizeof(RxBuffer));
 336              		.loc 1 208 18 is_stmt 0 view .LVU83
 337 0024 0021     		movs	r1, #0
 338 0026 074B     		ldr	r3, .L19
 339 0028 1970     		strb	r1, [r3]
 209:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t *)"OVERFLOW", 8, 0xFFFF);
 340              		.loc 1 209 5 is_stmt 1 view .LVU84
 341 002a 4FF48072 		mov	r2, #256
 342 002e 0748     		ldr	r0, .L19+8
 343              	.LVL27:
 209:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t *)"OVERFLOW", 8, 0xFFFF);
 344              		.loc 1 209 5 is_stmt 0 view .LVU85
 345 0030 FFF7FEFF 		bl	memset
 346              	.LVL28:
 210:Src/main.c    **** 
 347              		.loc 1 210 5 is_stmt 1 view .LVU86
 348 0034 4FF6FF73 		movw	r3, #65535
 349 0038 0822     		movs	r2, #8
 350 003a 0649     		ldr	r1, .L19+16
 351 003c 0448     		ldr	r0, .L19+12
 352 003e FFF7FEFF 		bl	HAL_UART_Transmit
 353              	.LVL29:
 354              	.LBE4:
 355 0042 E9E7     		b	.L16
 356              	.L20:
 357              		.align	2
 358              	.L19:
 359 0044 00000000 		.word	.LANCHOR0
 360 0048 00000000 		.word	aRxBuffer
 361 004c 00000000 		.word	RxBuffer
 362 0050 00000000 		.word	huart1
 363 0054 00000000 		.word	.LC0
 364              		.cfi_endproc
ARM GAS  /tmp/cctPkvIt.s 			page 12


 365              	.LFE67:
 367              		.section	.text.Error_Handler,"ax",%progbits
 368              		.align	1
 369              		.global	Error_Handler
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu softvfp
 375              	Error_Handler:
 376              	.LFB68:
 225:Src/main.c    **** 
 226:Src/main.c    **** /* USER CODE END 4 */
 227:Src/main.c    **** 
 228:Src/main.c    **** /**
 229:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 230:Src/main.c    ****   * @retval None
 231:Src/main.c    ****   */
 232:Src/main.c    **** void Error_Handler(void)
 233:Src/main.c    **** {
 377              		.loc 1 233 1 view -0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 234:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 235:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 236:Src/main.c    **** 
 237:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 238:Src/main.c    **** }
 382              		.loc 1 238 1 view .LVU88
 383 0000 7047     		bx	lr
 384              		.cfi_endproc
 385              	.LFE68:
 387              		.global	Uart1_Rx_Cnt
 388              		.comm	aRxBuffer,1,1
 389              		.comm	RxBuffer,256,4
 390              		.section	.bss.Uart1_Rx_Cnt,"aw",%nobits
 391              		.set	.LANCHOR0,. + 0
 394              	Uart1_Rx_Cnt:
 395 0000 00       		.space	1
 396              		.section	.rodata.HAL_UART_RxCpltCallback.str1.4,"aMS",%progbits,1
 397              		.align	2
 398              	.LC0:
 399 0000 4F564552 		.ascii	"OVERFLOW\000"
 399      464C4F57 
 399      00
 400              		.text
 401              	.Letext0:
 402              		.file 2 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default_type
 403              		.file 3 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 404              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 405              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 406              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 407              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 408              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 409              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 410              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
ARM GAS  /tmp/cctPkvIt.s 			page 13


 411              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 412              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 413              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 414              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 415              		.file 15 "Inc/tim.h"
 416              		.file 16 "Inc/usart.h"
 417              		.file 17 "<built-in>"
 418              		.file 18 "Inc/gpio.h"
ARM GAS  /tmp/cctPkvIt.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cctPkvIt.s:16     .text.SystemClock_Config:0000000000000000 $t
     /tmp/cctPkvIt.s:24     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cctPkvIt.s:112    .text.main:0000000000000000 $t
     /tmp/cctPkvIt.s:119    .text.main:0000000000000000 main
     /tmp/cctPkvIt.s:271    .text.main:00000000000000c4 $d
                            *COM*:0000000000000001 aRxBuffer
                            *COM*:0000000000000100 RxBuffer
     /tmp/cctPkvIt.s:284    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cctPkvIt.s:291    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cctPkvIt.s:359    .text.HAL_UART_RxCpltCallback:0000000000000044 $d
     /tmp/cctPkvIt.s:368    .text.Error_Handler:0000000000000000 $t
     /tmp/cctPkvIt.s:375    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cctPkvIt.s:394    .bss.Uart1_Rx_Cnt:0000000000000000 Uart1_Rx_Cnt
     /tmp/cctPkvIt.s:395    .bss.Uart1_Rx_Cnt:0000000000000000 $d
     /tmp/cctPkvIt.s:397    .rodata.HAL_UART_RxCpltCallback.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART1_UART_Init
MX_TIM1_Init
MX_TIM2_Init
HAL_GPIO_WritePin
HAL_UART_Receive_IT
HAL_TIM_PWM_Start
HAL_Delay
HAL_UART_Transmit
HAL_UART_GetState
HAL_GPIO_ReadPin
huart1
htim1
htim2
